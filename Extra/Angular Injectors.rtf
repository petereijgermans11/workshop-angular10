{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue-Medium;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red249\green249\blue249;\red38\green38\blue38;
\red23\green95\blue199;\red91\green91\blue91;\red23\green95\blue199;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c87059;\cssrgb\c98039\c98039\c98039;\cssrgb\c20000\c20000\c20000;
\cssrgb\c9804\c46275\c82353\c4706;\cssrgb\c43137\c43137\c43137;\cssrgb\c9804\c46275\c82353;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh21000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\pard\pardeftab720\sl580\partightenfactor0

\f1\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
Dependency Injection in Angular\
\
\pard\pardeftab720\sl320\partightenfactor0

\f2\fs28 \cf2 DI is a coding pattern in which a class asks for dependencies from external sources rather than creating them itself.\
\
The 
\b injector
\b0  is responsible for 
\b \ul creating service instances
\b0 \ulnone  
\b AND
\b0  
\b \ul injecting
\b0 \ulnone  them into classes like\'a0
\f3\fs25\fsmilli12600 HeroListComponent
\f2\fs28 .\
\
A 
\b provider
\b0  tells an injector\'a0
\i\b how to create the service
\i0\b0 .\'a0\
A provider can be the service class itself, so that the injector can use\'a0
\f3\fs25\fsmilli12600 new
\f2\fs28 \'a0to create an instance\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf4 \cb5 Injectors are inherited, which means that if a given injector can't resolve a dependency, it asks the parent injector to resolve it.\
A component can get services from:\
- its own injector, \
- element injectors (\cf2 \cb3 An injector does not actually belong to a component, but rather to the component instance's anchor element in the DOM\cf4 \cb5 )\
- from the injectors of its component ancestors, \
- from the injector of its parent NgModule, \
- or from the\'a0
\f3\fs25\fsmilli12600 root
\f2\fs28 \'a0injector. \
- Or from the 
\b \cb5 \ul \ulc4 platform injector
\b0 \ulnone : that is the parent of all app-root injectors.\
\
\
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 You can configure injectors with providers at different levels of your app, by setting a metadata value in one of three places:\kerning1\expnd0\expndtw0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
In the\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/Injectable"}}{\fldrslt Injectable}}()
\f2\fs28 \'a0decorator for the service itself.\cb1 \uc0\u8232 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
In the\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/NgModule"}}{\fldrslt NgModule}}()
\f2\fs28 \'a0decorator for an NgModule.\cb1 \uc0\u8232 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
In the\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/Component"}}{\fldrslt Component}}()
\f2\fs28 \'a0decorator for a component.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 The\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/Injectable"}}{\fldrslt Injectable}}()
\f2\fs28 \'a0decorator has the\'a0
\f3\fs25\fsmilli12600 providedIn
\f2\fs28 \'a0metadata option, where you can specify the provider of the decorated service class with the\'a0
\f3\fs25\fsmilli12600 root
\f2\fs28 injector, or with the injector for a specific NgModule.\
The\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/NgModule"}}{\fldrslt NgModule}}()
\f2\fs28 \'a0and\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/Component"}}{\fldrslt Component}}()
\f2\fs28 \'a0decorators have the\'a0
\f3\fs25\fsmilli12600 providers
\f2\fs28 \'a0metadata option, where you can configure providers for NgModule-level or component-level injectors.\
\pard\pardeftab720\sl320\partightenfactor0
\cf4 \cb5 \

\b \ul How to inject a service in a component?
\b0 \ulnone \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \cb3 You can tell Angular to inject a dependency in a 
\b \ul component's constructor
\b0 \ulnone  by specifying a\'a0
\f1 constructor parameter with the dependency type
\f2 .\
\
\pard\pardeftab720\sl480\sa240\partightenfactor0

\b\fs40 \cf2 \ul \ulc2 Injector hierarchy and service instances\
\pard\pardeftab720\sl320\partightenfactor0

\b0\fs28 \cf2 \ulnone Services are singletons\'a0
\i within the scope of an injector
\i0 . \
There is only one root injector for an app. Providing\'a0
\f3\fs25\fsmilli12600 UserService
\f2\fs28 \'a0at the\'a0
\f3\fs25\fsmilli12600 root
\f2\fs28 \'a0or\'a0
\f3\fs25\fsmilli12600 AppModule
\f2\fs28 \'a0level means it is registered with the root injector.\
\cf4 \cb5 \
\cf2 \cb3 Whenever Angular creates a new instance of a component that has\'a0
\f3\fs25\fsmilli12600 providers
\f2\fs28 \'a0specified in\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/Component"}}{\fldrslt Component}}()
\f2\fs28 , it also creates a new\'a0
\i child injector
\i0 \'a0for that instance.\cf4 \cb5 \
\
\pard\pardeftab720\sl480\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://angular.io/guide/dependency-injection-providers#tree-shakable-providers"}}{\fldrslt \cf6 \cb3 tree-shakable providers}}\cf2 \cb3 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 If you use in your Service the\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/Injectable"}}{\fldrslt Injectable}}()
\f2\fs28 \'a0option\'a0
\f3\fs25\fsmilli12600 providedIn: MyLazyloadModule
\f2\fs28 , the provider could be 
\b \ul shaken out at compile time
\b0 \ulnone , if it is not used anywhere else in the app.\
\
\pard\pardeftab720\sl540\sa480\partightenfactor0

\f1\fs44 \cf2 \ul Injector bubbling\ulnone \
\pard\pardeftab720\sl320\partightenfactor0

\f2\fs28 \cf2 When a component requests a dependency, Angular tries to satisfy that dependency with a provider registered in that component's own injector. If the component's injector lacks the provider, it passes the request up to its parent component's injector. \
\
\cf4 \cb5 You can cap the bubbling by adding the\'a0
\f3\fs25\fsmilli12600 @{\field{\*\fldinst{HYPERLINK "https://angular.io/api/core/Host"}}{\fldrslt Host}}()
\f2\fs28 \'a0parameter decorator on the dependant-service parameter in a component's constructor. The hunt for providers stops at the injector for the host element of the component.\
\
\pard\pardeftab720\sl320\partightenfactor0

\b\fs36 \cf4 \ul DI token
\b0  
\fs28 or 
\f1\fs36 \cf2 \cb3 InjectionToken
\f2\fs28 \cf4 \cb5 \ulnone \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \cb3 A dependency\'a0{\field{\*\fldinst{HYPERLINK "https://angular.io/guide/glossary#provider"}}{\fldrslt \cf7 provider}}\'a0configures an injector with a\'a0{\field{\*\fldinst{HYPERLINK "https://angular.io/guide/glossary#di-token"}}{\fldrslt \cf7 DI token}}, which that injector uses to provide the concrete, runtime version of a dependency value.\'a0\
\
\pard\pardeftab720\sl440\partightenfactor0

\fs36 \cf4 \cb8 There are a\'a0number of\'a0different types of\'a0tokens we can use when configuring providers:\
- String tokens\
- Type token\
- Injection token\
\
String tokens can cause name clashes so we prefer to\'a0use\'a0
\i InjectionTokens
\i0 \'a0instead.\
\
See:\
https://codecraft.tv/courses/angular/dependency-injection-and-providers/tokens/
\fs28 \cf2 \cb3 \
}